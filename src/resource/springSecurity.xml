<beans xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <!-- 开发环境可以放置 <debug /> 配置，会输出详细Security处理日志，正式环境建议屏蔽 <debug /> 配置-->
    <!--================================================================-->
    <security:debug/>
    <!--================================================================-->


    <security:http security="none" pattern="/login.jsp"/>
    <security:http security="none" pattern="/403.jsp"/>

    <!-- use-expressions="true" 的意思是开启表达式
     access-denied-page的意思是，当验证权限失败后会跳转到的页面-->
    <!--<security:http auto-config="false" access-denied-page="/403.jsp"  use-expressions="true"  entry-point-ref="myAuthenticationEntryPoint">-->
    <security:http auto-config="true" access-denied-page="/403.jsp">
        <security:form-login login-page="/login.jsp"
                             login-processing-url="/api/user/login"
                             username-parameter="username"
                             password-parameter="password"
                             default-target-url="/index.html"
                             always-use-default-target="true"
                             authentication-failure-url="/login.jsp?error=true"/>
        <!--定义记住我功能 实现免登陆验证-->
        <!--表示匿名用户可以访问-->
        <!--<security:remember-me key="hellospring" data-source-ref="dataSource"/>-->

        <security:intercept-url pattern="/login*.jsp*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/logout*.jsp*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <security:intercept-url pattern="/admin*.jsp*" access="ROLE_ADMIN"/>
        <security:intercept-url pattern="/api/user/get" access="ROLE_ADMIN"/>
        <security:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN"/>
        <!--<security:access-denied-handler error-page="/403.jsp"/>-->


        <!--================================================================-->
        <!-- 登出管理
      logout-url 属性:这个指定的URL会触发注销操作，默认是 /j_spring_security_logout
      invalidate-session 属性：如果为true，在注销的时候会销毁会话
      delete-cookies 属性：以逗号分隔的cookies名称，在用户注销时删除指定的cookies-->
        <security:logout logout-url="/api/user/logout" logout-success-url="/logout.jsp" invalidate-session="true"
                         delete-cookies="JSESSIONID"/>
        <!--================================================================-->


        <!--==============================会话管理==================================-->
        <!-- session超时跳转页面 以及每用户可拥有的session最大个数
         如果每次退出后，必须要求用户必须重开浏览器才能登录，可以将 invalid-session-url="/logout.jsp"，
         防止有些 Web 应用把用户的会话标识符直接通过 URL 的参数来传递-->
        <security:session-management invalid-session-url="/background/login.html" session-fixation-protection="none">
            <security:concurrency-control max-sessions="1"
                                          error-if-maximum-exceeded="true"/>
        </security:session-management>
        <!--================================================================-->

        <!--关联代码：xyz.dongxiaoxia.hellospring.security.MySecurityMetadataSource#loadResourceDefine-->
        <!-- -->
        <!--关联代码：xyz.dongxiaoxia.hellospring.security.MyUserDetailServiceImpl#obtionGrantedAuthorities-->
        <!--"ROLE_"固定，AAA为权限：注意对于我的例子其实是RESOURCES表的NAME字段的值-->
        <!--↓↓↓SPRING默认的访问权限控制↓↓↓ -->

        <!--以上未列出的，也都必须验证才能访问 -->
        <!--<security:intercept-url pattern="/background/**" access="isAuthenticated()"/>-->
        <!--以上未列出的，也都必须验证才能访问-->
        <!--注意： xya.dongxiaoxia.hellospring.security.MyAccessDecisionManager是自已实现的权限控制-->
        <!--注意： 不但要满足自己实现的权限控制还要满足SPRING默认的访问权限控制才可以访问特定资源-->

        <!--所有地址全开，无需验证，测试用 -->
        <!--<security:intercept-url pattern="/**" access="permitAll"/>-->


        <!-- 认证和授权
          项目使用了自定义登录处理，如果使用security的登录处理，请去掉以下注释-->
        <!--<security:custom-filter ref="myLoginFilter" position="FORM_LOGIN_FILTER"  />-->


        <!--================================自定义过滤器================================-->
        <!-- Spring Sercurity要从数据库中获取用户、权限、资源来实现权限管理，需要自定义过滤器，
         　并且该过滤器必须在spring Security执行FILTER_SECURITY_INTERCEPTOR过滤器之前执行，
         　 因为该框架实现权限管理实质就是在执行action之前先执行它框架中的为权限管理制定的一系列Fliter。
         　　我们自定的这个SercurityFilter类要继承AbstractSecurityInterceptor 接口和Filter类（负责传递一系列的Filter）,
         　　因为我们是从数据库中获取权限验证的数据，所以还要重写FilterInvocationSecurityMetadataSource 接口，
         AccessDecisionManager 接口，UserDetailsService 接口，只要重写了这3个接口，
         然后再spring配置文件中做相应的配置，项目启动启动后，我们进行资源请求，就自动会去执行我们重定义的类进行权限判断。
        -->
        <!--在http标签下配置一个我们自定义的继承了org.springframework.security.access.intercept.AbstractSecurityInterceptor的Filter，并注入其-->
        <!--必须的3个组件authenticationManager、accessDecisionManager和securityMetadataSource。其作用上面已经注释了。-->
        <!--这里的FILTER_SECURITY_INTERCEPTOR是Spring Security默认的Filter，-->
        <!--我们自定义的Filter必须在它之前，过滤请求-->
        <security:custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
        <!--================================================================-->

    </security:http>
    <!--未登录的切入点-->
    <!--<bean id="myAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <property name="loginFormUrl" value="/background/login.html"></property>
    </bean>-->
    <!---↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓几种认证管理方法↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓-->
    <!---==================================自定义数据库认证============================================-->
    <security:authentication-manager alias="myAuthenticationManager">
        <!--实现了UserDetailsService的Bean 用户拥有的权限：登录后取得用户所保有的权限信息-->
        <security:authentication-provider user-service-ref="myUserDetailServiceImpl">
            <!--MD5加密，盐值加密 -->
            <security:password-encoder hash="md5">
                <security:salt-source user-property="username"/>
            </security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>
    <!---===============================================================================================-->
    <!---==================================基于XML配置的认证============================================-->
    <!--<security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="user" password="user" authorities="ROLE_USER"/>
                <security:user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>-->
    <!---=================================================================================================-->
    <!---===============================================居于jdbc的用于认证的AuthenticationManager==================================================-->
    <!-- <security:authentication-manager alias="authenticationManager">
         <security:authentication-provider
                 user-service-ref="userDetailsService" />
     </security:authentication-manager>

     <bean id="userDetailsService"
           class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
         <property name="dataSource" ref="dataSource" />
     </bean>-->
    <!---=================================================================================================-->
    <!---==================居于jdbc的用于认证的AuthenticationManager 跟上面意思一样，只是自定义了sql语句===============-->
    <!-- <security:authentication-manager>
        <security:authentication-provider>
            <security:jdbc-user-service data-source-ref="dataSource"
                                        users-by-username-query="SELECT username,password,enabled FROM SYSTEM_USER WHERE username = ?"
                                        authorities-by-username-query="select u.username,r.name as authority
                                             from user u
                                             join user_role ur
                                               on u.id=ur.user_id
                                             join role r
                                               on r.id=ur.role_id
                                            where u.username=?"
                    />
        </security:authentication-provider>
    </security:authentication-manager>-->
    <!---=================================================================================================-->
    <!---↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑几种认证管理方法↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑v-->


    <!--=================================登录验证===============================-->
    <!--登录验证器：用户有没有登录的资格
    init-method="init" 初始化方法
    项目使用了自定义登录处理，如果使用security的登录处理，请去掉以下注释-->
    <!--<bean id="myLoginFilter" init-method="init" class="xyz.dongxiaoxia.hellospring.security.MySecurityFilter">
        <property name="authenticationManager" ref="myAuthenticationManager"/>
        <property name="filterProcessesUrl" value="/background/j_security_check" />
        &lt;!&ndash;验证成功后要跳转的URL&ndash;&gt;
        <property name="successUrl" value="/background/index.html" />
        &lt;!&ndash;验证失败后要跳转的URL&ndash;&gt;
        <property name="errorUrl" value="/background/login.html" />
    </bean>-->
    <!--================================================================-->


    <bean id="messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename"
                  value="classpath:org/springframework/security/messages"/>
    </bean>


    <!--=================================方法权限控制===============================-->

    <!--xml配置的方法权限控制-->
    <security:global-method-security>
        <security:protect-pointcut
                expression="execution(* xyz.dongxiaoxia.hellospring.service.UserService.add(..))"
                access="ROLE_ADMIN"/>
    </security:global-method-security>
    <!-- 开启支持方法注解的权限控制：
     @PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
     @PostAuthorize：该注解用来在方法执行完之后进行访问控制检查。
     @PostFilter：该注解用来对方法的返回结果进行过滤。从返回的集合中过滤掉表达式值为假的元素。如@PostFilter("hasPermission(filterObject, 'read')")说明返回的结果中只保留当前用户有读权限的元素。
     @PreFilter：该注解用来对方法调用时的参数进行过滤。-->
    <!--<security:global-method-security pre-post-annotations="enabled" />-->
    <!--<security:global-method-security secured-annotations="enabled"/>-->
    <!--================================================================-->

</beans>
