<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"
       default-lazy-init="true">
    <description>Spring公共配置</description>


    <!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
    <context:component-scan base-package="xyz.dongxiaoxia.hellospring">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <context:property-placeholder location="classpath:jdbc.properties"/>


    <!--==========================================Spring Email Integration=====================================================-->
    <!--<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com"/>
        <property name="username" value="01dongxiaoxia@gmail.com" />
        <property name="password" value="dong18604012927." />
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="mail.smtp.socketFactory.fallback">false</prop>
                <prop key="mail.smtp.port">587</prop>
                <prop key="mail.smtp.socketFactory.port">587</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.timeout">25000</prop>
            </props>
        </property>
    </bean>-->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.qq.com"/>
        <property name="port" value="25"/>
        <property name="username" value="810196858@qq.com"/>
        <property name="password" value="sycysb201314...."/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
            </props>
        </property>
    </bean>
    <!-- this is a template message that we can pre-load with default state -->
    <!-- You can have some pre-configured messagess also which are ready to send -->
    <bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="810196858@qq.com"/>
        <property name="subject" value="Your order"/>
    </bean>
    <bean id="EmailMessage" class="xyz.dongxiaoxia.hellospring.message.EmailMessage">
        <property name="mailSender" ref="mailSender"/>
        <property name="templateMessage" ref="templateMessage"/>
    </bean>
    <bean id="emailMessageWithJavaMailSender"
          class="xyz.dongxiaoxia.hellospring.message.EmailMessageWithJavaMailSender">
        <property name="mailSender" ref="mailSender"/>
    </bean>
    <!--===========================Spring Email Integration====================================-->
    <!--==============================Spring Task Execution and Scheduling ===========================-->

    <!--↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓The Task Namespace↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓-->
    <task:annotation-driven/>

    <bean id="job" class="xyz.dongxiaoxia.hellospring.task_execition_and_scheduling.TaskJobWithXml">
    </bean>
    <!--The 'executor' element-->
    <task:executor id="myExecutor" pool-size="5-25" queue-capacity="100" rejection-policy="CALLER_RUNS"
                   keep-alive="120"/>
    <!--The 'scheduler' element-->
    <task:scheduler id="myScheduler" pool-size="10"/>
    <!--The 'scheduled-tasks' element-->
    <task:scheduled-tasks scheduler="myScheduler">
        <!--<task:scheduled ref="job" method="job" cron="0 * * * * ?" fixed-delay="5000"/>-->
        <task:scheduled ref="job" method="job" fixed-delay="1000"/>
    </task:scheduled-tasks>

    <!--↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑The Task Namespace↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑-->
    <!--↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓、↓↓Using the Quartz Scheduler↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓-->
    <!--业务类的配置-->
    <bean id="myJobNotQuartzJobBean"
          class="xyz.dongxiaoxia.hellospring.task_execition_and_scheduling.MyJobNotQuartzJobBean"></bean>
    <!--Step 1: Configure Jobs in Quartz Scheduler-->
    <!--JobDetail的配置-->
    <!--A : Using MethodInvokingJobDetailFactoryBean-->
    <bean id="simpleJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!--<property name="targetObject">-->
        <!--<bean class="xyz.dongxiaoxia.hellospring.task_execition_and_scheduling.MyJobNotQuartzJobBeanNotQuartzJobBean" />-->
        <!--</property>-->
        <property name="targetObject" ref="myJobNotQuartzJobBean"></property>
        <property name="targetMethod" value="work"/>
        <property name="concurrent" value="true"/>
    </bean>
    <!--targetObject 要执行的类-->
    <!--targetMethod 要执行类当中的方法-->
    <!--concurrent 是否立即马上执行（当，类实例化后）-->
    <!--concurrent 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
    <!--B : Using JobDetailFactoryBean-->
    <!--  Job class must implement the Job interface.-->
    <bean id="complexJobDetail"
          class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass"
                  value="xyz.dongxiaoxia.hellospring.task_execition_and_scheduling.MyJobExtendQuartzJobBean"/>
        <!--<property name="jobDataMap">-->
        <!--<map>-->
        <!--<entry key="task" value-ref="task"></entry>-->
        <!--</map>-->
        <!--</property>-->
        <property name="durability" value="true"/>
    </bean>
    <!--jobClass 配置任务要执行的类-->
    <!--jobDataMap 配置执行类当中的参数设置-->
    <!--Trigger的配置-->
    <!-- Step 2: Configure Triggers to be used in Quartz Scheduler-->
    <!--A: Simple Trigger , using SimpleTriggerFactoryBean-->
    <bean id="simpleTrigger"
          class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="simpleJobDetail"/>
        <property name="startDelay" value="1000"/>
        <property name="repeatInterval" value="2000"/>
        <!-- repeatInterval： 这中触发器方式，配置的时间，2秒钟触发一次。-->
    </bean>
    <!--B: Cron Trigger , using CronTriggerFactoryBean-->
    <bean id="cronTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="complexJobDetail"></property>
        <property name="cronExpression">
            <value>0/1 * * * * ?</value>
        </property>
    </bean>
    <!--Step 3: Configure SchedulerFactoryBean that creates and configures Quartz Scheduler-->
    <!--Scheduler的配置-->
    <bean id="myScheduler2"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="simpleTrigger"></ref>
                <ref bean="cronTrigger"></ref>
            </list>
        </property>
        <property name="autoStartup" value="true"></property>
    </bean>

    <!--↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑Using the Quartz Scheduler↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑-->
    <!--==============================Spring Task Execution and Scheduling ==========================================-->
    <!--==============================Remoting and Web Services using Spring  ==========================================-->
    <bean id="accountService" class="xyz.dongxiaoxia.hellospring.remoting_and_webservices.RMI.AccountServiceImpl">
        <!-- any additional properties, maybe a DAO? -->
    </bean>
    <bean class="org.springframework.remoting.rmi.RmiServiceExporter">
        <!-- does not necessarily have to be the same name as the bean to be exported -->
        <property name="serviceName" value="AccountService"/>
        <property name="service" ref="accountService"/>
        <property name="serviceInterface"
                  value="xyz.dongxiaoxia.hellospring.remoting_and_webservices.RMI.AccountService"/>
        <!-- defaults to 1099 -->
        <property name="registryPort" value="1199"/>
    </bean>
    <!--<bean class="xyz.dongxiaoxia.hellospring.remoting_and_webservices.RMI.SimpleObject">-->
    <!--<property name="accountService" ref="accountService1"/>-->
    <!--</bean>-->
    <!--<bean id="accountService1" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">-->
    <!--<property name="serviceUrl" value="rmi://localhost:1199/AccountService"/>-->
    <!--<property name="serviceInterface" value="xyz.dongxiaoxia.hellospring.remoting_and_webservices.RMI.AccountService"/>-->
    <!--</bean>-->
    <!--==============================Remoting and Web Services using Spring ==========================================-->

</beans>
